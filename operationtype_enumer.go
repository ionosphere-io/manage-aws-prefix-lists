// Code generated by "enumer -json -type=OperationType"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _OperationTypeName = "OpNoModifyPrefixListOpCreatePrefixListOpUpdatePrefixListEntriesOpReplacePrefixListOpPrefixListQueryFailedErrorOpPrefixListCreateFailedErrorOpPrefixListDeleteFailedErrorOpPrefixListUpdateFailedErrorOpUpdateSecurityGroupIngressOpUpdateSecurityGroupEgressOpSecurityGroupQueryFailedErrorOpSecurityGroupUpdateFailedErrorOpNoModifySSMParameterValueOpSSMParameterCreatedOpSSMParameterValueUpdatedOpNoModifySSMParameterTagsOpSSMParameterTagsUpdatedOpSSMQueryFailedErrorOpSSMParameterCreateFailedErrorOpSSMParameterValueUpdateFailedErrorOpSSMParameterTagsUpdateFailedError"

var _OperationTypeIndex = [...]uint16{0, 20, 38, 63, 82, 110, 139, 168, 197, 225, 252, 283, 315, 342, 363, 389, 415, 440, 461, 492, 528, 563}

func (i OperationType) String() string {
	if i >= OperationType(len(_OperationTypeIndex)-1) {
		return fmt.Sprintf("OperationType(%d)", i)
	}
	return _OperationTypeName[_OperationTypeIndex[i]:_OperationTypeIndex[i+1]]
}

var _OperationTypeValues = []OperationType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}

var _OperationTypeNameToValueMap = map[string]OperationType{
	_OperationTypeName[0:20]:    0,
	_OperationTypeName[20:38]:   1,
	_OperationTypeName[38:63]:   2,
	_OperationTypeName[63:82]:   3,
	_OperationTypeName[82:110]:  4,
	_OperationTypeName[110:139]: 5,
	_OperationTypeName[139:168]: 6,
	_OperationTypeName[168:197]: 7,
	_OperationTypeName[197:225]: 8,
	_OperationTypeName[225:252]: 9,
	_OperationTypeName[252:283]: 10,
	_OperationTypeName[283:315]: 11,
	_OperationTypeName[315:342]: 12,
	_OperationTypeName[342:363]: 13,
	_OperationTypeName[363:389]: 14,
	_OperationTypeName[389:415]: 15,
	_OperationTypeName[415:440]: 16,
	_OperationTypeName[440:461]: 17,
	_OperationTypeName[461:492]: 18,
	_OperationTypeName[492:528]: 19,
	_OperationTypeName[528:563]: 20,
}

// OperationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OperationTypeString(s string) (OperationType, error) {
	if val, ok := _OperationTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OperationType values", s)
}

// OperationTypeValues returns all values of the enum
func OperationTypeValues() []OperationType {
	return _OperationTypeValues
}

// IsAOperationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OperationType) IsAOperationType() bool {
	for _, v := range _OperationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OperationType
func (i OperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OperationType
func (i *OperationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OperationType should be a string, got %s", data)
	}

	var err error
	*i, err = OperationTypeString(s)
	return err
}
